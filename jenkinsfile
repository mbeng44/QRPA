pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'c2309f0c-9117-4f86-b889-0643466815a6' 
        DOCKER_IMAGE_NAME = 'mbeng44/jenkins/jenkins' 
        SONARQUBE_SERVER = 'SonarQube-Server' // Replace with your SonarQube server name
        SONARQUBE_PROJECT_KEY = 'your-project-key' // Replace with your SonarQube project key
        SONARQUBE_TOKEN = 'your-sonarqube-token' // Replace with your SonarQube token
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Static Code Analysis') {
            steps {
                script {
                    // Run static code analysis using SonarQube
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh 'mvn sonar:sonar -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} -Dsonar.host.url=http://localhost:9000 -Dsonar.login=${SONARQUBE_TOKEN}'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${env.DOCKER_IMAGE_NAME}:latest")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', env.DOCKER_CREDENTIALS_ID) {
                        docker.image("${env.DOCKER_IMAGE_NAME}:latest").push()
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
